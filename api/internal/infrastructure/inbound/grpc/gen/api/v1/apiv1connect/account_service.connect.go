// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/account_service.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/AliTSayyed/VULX-AI-Website-Builder/api/internal/infrastructure/inbound/grpc/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "api.v1.AccountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountServiceBeginAccountAuthProcedure is the fully-qualified name of the AccountService's
	// BeginAccountAuth RPC.
	AccountServiceBeginAccountAuthProcedure = "/api.v1.AccountService/BeginAccountAuth"
	// AccountServiceFinishAccountAuthProcedure is the fully-qualified name of the AccountService's
	// FinishAccountAuth RPC.
	AccountServiceFinishAccountAuthProcedure = "/api.v1.AccountService/FinishAccountAuth"
	// AccountServiceAccountLogoutProcedure is the fully-qualified name of the AccountService's
	// AccountLogout RPC.
	AccountServiceAccountLogoutProcedure = "/api.v1.AccountService/AccountLogout"
	// AccountServiceGetUserProfileProcedure is the fully-qualified name of the AccountService's
	// GetUserProfile RPC.
	AccountServiceGetUserProfileProcedure = "/api.v1.AccountService/GetUserProfile"
)

// AccountServiceClient is a client for the api.v1.AccountService service.
type AccountServiceClient interface {
	BeginAccountAuth(context.Context, *connect.Request[v1.BeginAccountAuthRequest]) (*connect.Response[v1.BeginAccountAuthResponse], error)
	FinishAccountAuth(context.Context, *connect.Request[v1.FinishAccountAuthRequest]) (*connect.Response[v1.FinishAccountAuthResponse], error)
	AccountLogout(context.Context, *connect.Request[v1.AccountLogoutRequest]) (*connect.Response[v1.AccountLogoutResponse], error)
	GetUserProfile(context.Context, *connect.Request[v1.GetUserProfileRequest]) (*connect.Response[v1.GetUserProfileResponse], error)
}

// NewAccountServiceClient constructs a client for the api.v1.AccountService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	accountServiceMethods := v1.File_api_v1_account_service_proto.Services().ByName("AccountService").Methods()
	return &accountServiceClient{
		beginAccountAuth: connect.NewClient[v1.BeginAccountAuthRequest, v1.BeginAccountAuthResponse](
			httpClient,
			baseURL+AccountServiceBeginAccountAuthProcedure,
			connect.WithSchema(accountServiceMethods.ByName("BeginAccountAuth")),
			connect.WithClientOptions(opts...),
		),
		finishAccountAuth: connect.NewClient[v1.FinishAccountAuthRequest, v1.FinishAccountAuthResponse](
			httpClient,
			baseURL+AccountServiceFinishAccountAuthProcedure,
			connect.WithSchema(accountServiceMethods.ByName("FinishAccountAuth")),
			connect.WithClientOptions(opts...),
		),
		accountLogout: connect.NewClient[v1.AccountLogoutRequest, v1.AccountLogoutResponse](
			httpClient,
			baseURL+AccountServiceAccountLogoutProcedure,
			connect.WithSchema(accountServiceMethods.ByName("AccountLogout")),
			connect.WithClientOptions(opts...),
		),
		getUserProfile: connect.NewClient[v1.GetUserProfileRequest, v1.GetUserProfileResponse](
			httpClient,
			baseURL+AccountServiceGetUserProfileProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetUserProfile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	beginAccountAuth  *connect.Client[v1.BeginAccountAuthRequest, v1.BeginAccountAuthResponse]
	finishAccountAuth *connect.Client[v1.FinishAccountAuthRequest, v1.FinishAccountAuthResponse]
	accountLogout     *connect.Client[v1.AccountLogoutRequest, v1.AccountLogoutResponse]
	getUserProfile    *connect.Client[v1.GetUserProfileRequest, v1.GetUserProfileResponse]
}

// BeginAccountAuth calls api.v1.AccountService.BeginAccountAuth.
func (c *accountServiceClient) BeginAccountAuth(ctx context.Context, req *connect.Request[v1.BeginAccountAuthRequest]) (*connect.Response[v1.BeginAccountAuthResponse], error) {
	return c.beginAccountAuth.CallUnary(ctx, req)
}

// FinishAccountAuth calls api.v1.AccountService.FinishAccountAuth.
func (c *accountServiceClient) FinishAccountAuth(ctx context.Context, req *connect.Request[v1.FinishAccountAuthRequest]) (*connect.Response[v1.FinishAccountAuthResponse], error) {
	return c.finishAccountAuth.CallUnary(ctx, req)
}

// AccountLogout calls api.v1.AccountService.AccountLogout.
func (c *accountServiceClient) AccountLogout(ctx context.Context, req *connect.Request[v1.AccountLogoutRequest]) (*connect.Response[v1.AccountLogoutResponse], error) {
	return c.accountLogout.CallUnary(ctx, req)
}

// GetUserProfile calls api.v1.AccountService.GetUserProfile.
func (c *accountServiceClient) GetUserProfile(ctx context.Context, req *connect.Request[v1.GetUserProfileRequest]) (*connect.Response[v1.GetUserProfileResponse], error) {
	return c.getUserProfile.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the api.v1.AccountService service.
type AccountServiceHandler interface {
	BeginAccountAuth(context.Context, *connect.Request[v1.BeginAccountAuthRequest]) (*connect.Response[v1.BeginAccountAuthResponse], error)
	FinishAccountAuth(context.Context, *connect.Request[v1.FinishAccountAuthRequest]) (*connect.Response[v1.FinishAccountAuthResponse], error)
	AccountLogout(context.Context, *connect.Request[v1.AccountLogoutRequest]) (*connect.Response[v1.AccountLogoutResponse], error)
	GetUserProfile(context.Context, *connect.Request[v1.GetUserProfileRequest]) (*connect.Response[v1.GetUserProfileResponse], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountServiceMethods := v1.File_api_v1_account_service_proto.Services().ByName("AccountService").Methods()
	accountServiceBeginAccountAuthHandler := connect.NewUnaryHandler(
		AccountServiceBeginAccountAuthProcedure,
		svc.BeginAccountAuth,
		connect.WithSchema(accountServiceMethods.ByName("BeginAccountAuth")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceFinishAccountAuthHandler := connect.NewUnaryHandler(
		AccountServiceFinishAccountAuthProcedure,
		svc.FinishAccountAuth,
		connect.WithSchema(accountServiceMethods.ByName("FinishAccountAuth")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceAccountLogoutHandler := connect.NewUnaryHandler(
		AccountServiceAccountLogoutProcedure,
		svc.AccountLogout,
		connect.WithSchema(accountServiceMethods.ByName("AccountLogout")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetUserProfileHandler := connect.NewUnaryHandler(
		AccountServiceGetUserProfileProcedure,
		svc.GetUserProfile,
		connect.WithSchema(accountServiceMethods.ByName("GetUserProfile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.AccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountServiceBeginAccountAuthProcedure:
			accountServiceBeginAccountAuthHandler.ServeHTTP(w, r)
		case AccountServiceFinishAccountAuthProcedure:
			accountServiceFinishAccountAuthHandler.ServeHTTP(w, r)
		case AccountServiceAccountLogoutProcedure:
			accountServiceAccountLogoutHandler.ServeHTTP(w, r)
		case AccountServiceGetUserProfileProcedure:
			accountServiceGetUserProfileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) BeginAccountAuth(context.Context, *connect.Request[v1.BeginAccountAuthRequest]) (*connect.Response[v1.BeginAccountAuthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.AccountService.BeginAccountAuth is not implemented"))
}

func (UnimplementedAccountServiceHandler) FinishAccountAuth(context.Context, *connect.Request[v1.FinishAccountAuthRequest]) (*connect.Response[v1.FinishAccountAuthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.AccountService.FinishAccountAuth is not implemented"))
}

func (UnimplementedAccountServiceHandler) AccountLogout(context.Context, *connect.Request[v1.AccountLogoutRequest]) (*connect.Response[v1.AccountLogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.AccountService.AccountLogout is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetUserProfile(context.Context, *connect.Request[v1.GetUserProfileRequest]) (*connect.Response[v1.GetUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.AccountService.GetUserProfile is not implemented"))
}
